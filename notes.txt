PUSH

  sometimes, we want the server to be able to 'push' a message to the client (immediately, based on some event)
    ex. chat app, email client, game, screen-share




PUSH with HTTP

  HTTP is a request-response protocol, so, the only way the server can send a message to the client is if the client makes the request first

  ...but, there are ways to implement "push" with HTTP:

  POLLING

    client asks for an update every ~1 sec (using ajax)

  LONG POLLING

    client asks for an update (ie. ajax request)
      server keeps connection open until it has something to send
      server sends a response
    client receives response
    client immediately asks for an update again (ie. ajax request)






WEBSOCKETS


  another protocol that browsers understand
    text-based protocol
      (ie. not binary)
    guaranteed message send/receive
    bidirectional
      (can send messages client->server, server->client)
      (both sides can start sending data at any time)
    persistent connection
      (ie. client connects, connection kept open)


  client knows of one server
  server manages receive/sending messages between many clients

         <-> CLIENT
  SERVER <-> CLIENT
         <-> CLIENT

  benefits over polling/long-polling with ajax:

    less connection overhead
       w/ HTTP, keep having to make/drop connections (this introduces a delay)
       w/ ws, connect once, keep connection open

    less message overhead
       w/ HTTP, headers + cookies on every message
       w/ ws, ~0 message overhead


  websockets is ideal for:
   - lots of data (high bandwith)
   - minimal delay (low ping, low latency)

   real-time game -> websockets!
   chat client -> polling/long-polling is fine, websockets ok too


  up to you to come up with names for events
  typically send JSON back and forth
    (manually using JSON.stringify and JSON.parse)

  websockets api:
    https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API
    well supported: http://caniuse.com/#search=websocket

  socket.io  ("jquery for websockets")
    http://socket.io/
    cross-browser API
    takes care of "rooms"
    takes care of JSON conversion
    automatic fallback to ajax




WEBRTC

  https://developer.mozilla.org/en-US/docs/Web/Guide/API/WebRTC

  another "protocol"!

  API over UDP
   peer-to-peer (!!!)
   binary
   can lose data
   perfect for video/audio streaming
   also used for secure chat

   https://simplewebrtc.com/





CHAT CODE EXAMPLE:

  client->server message types:
    register
    message
    mousemove

  server->client message types:
    message
    mousemove

  potential improvements:
    show user old messages (before they joined the chat room)
    when creating message and moving mouse, update the local state immediately (currently we update it when we receive the message back from the server)
    remove dots of disconnected users
    show name of user beside dot
    security:
      don't allow duplicate names
      character-encode the name (to prevent injection attacks)
      limit name to be something that can be within the #id attribute


