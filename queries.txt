-- all tracks, with artist name and album name

SELECT tracks.title AS title, albums.title AS album, artists.name AS artist
FROM tracks
JOIN albums ON tracks.album_id = albums.id
JOIN artists ON albums.artist_id = artists.id;

-- same as above, using where to magically specify joins

SELECT tracks.title AS title, albums.title AS album, artists.name AS artist
FROM artists, albums, tracks
WHERE albums.artist_id = artists.id AND tracks.album_id = albums.id;

-- all artists with tags

SELECT artists.name AS artist, GROUP_CONCAT(tags.name) AS tag
FROM artists, tags
JOIN artists_tags AS at ON at.artist_id = artists.id AND at.tag_id = tags.id
GROUP BY artists.id;

-- # of albums per artist

SELECT artists.name AS artist, COUNT(albums.id) AS album_count
FROM artists
JOIN albums ON albums.artist_id = artists.id
GROUP BY artists.id;

-- # of albums per artist who have more than 2 albums, in descending order

SELECT artists.name, COUNT(albums.id) AS cnt
FROM artists
JOIN albums ON albums.artist_id = artists.id
GROUP BY artists.id
HAVING cnt >= 2
ORDER BY cnt DESC;

-- average tracks per album

SELECT COUNT(tracks.id) / COUNT(distinct albums.id) AS avg
FROM albums, tracks
WHERE tracks.album_id = albums.id;

-- same as above, without join

SELECT COUNT(distinct tracks.id) / COUNT(distinct albums.id)
FROM albums, tracks;

-- average number of tracks in albums of a tag, in order

SELECT tags.name AS tag, COUNT(tracks.id) / COUNT(distinct albums.id) AS avg
FROM tags, artists
JOIN artists_tags ON artists_tags.artist_id = artists.id AND artists_tags.tag_id = tags.id
JOIN tracks ON albums.id = tracks.album_id
JOIN albums ON albums.artist_id = artists.id
GROUP BY tags.id
ORDER BY avg DESC;

